//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace RdlcDemo {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("_Eoc_Account_TransferDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class _Eoc_Account_TransferDataSet : global::System.Data.DataSet {
        
        private _Transaction_AccountToAccountDataTable _tableTransaction_AccountToAccount;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public _Eoc_Account_TransferDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected _Eoc_Account_TransferDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Transaction.AccountToAccount"] != null)) {
                    base.Tables.Add(new _Transaction_AccountToAccountDataTable(ds.Tables["Transaction.AccountToAccount"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _Transaction_AccountToAccountDataTable _Transaction_AccountToAccount {
            get {
                return this._tableTransaction_AccountToAccount;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            _Eoc_Account_TransferDataSet cln = ((_Eoc_Account_TransferDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Transaction.AccountToAccount"] != null)) {
                    base.Tables.Add(new _Transaction_AccountToAccountDataTable(ds.Tables["Transaction.AccountToAccount"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars(bool initTable) {
            this._tableTransaction_AccountToAccount = ((_Transaction_AccountToAccountDataTable)(base.Tables["Transaction.AccountToAccount"]));
            if ((initTable == true)) {
                if ((this._tableTransaction_AccountToAccount != null)) {
                    this._tableTransaction_AccountToAccount.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitClass() {
            this.DataSetName = "_Eoc_Account_TransferDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/_Eoc_Account_TransferDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this._tableTransaction_AccountToAccount = new _Transaction_AccountToAccountDataTable();
            base.Tables.Add(this._tableTransaction_AccountToAccount);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerialize_Transaction_AccountToAccount() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            _Eoc_Account_TransferDataSet ds = new _Eoc_Account_TransferDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void _Transaction_AccountToAccountRowChangeEventHandler(object sender, _Transaction_AccountToAccountRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _Transaction_AccountToAccountDataTable : global::System.Data.TypedTableBase<_Transaction_AccountToAccountRow> {
            
            private global::System.Data.DataColumn columnTransactionId;
            
            private global::System.Data.DataColumn columnFromAccount;
            
            private global::System.Data.DataColumn columnToAccount;
            
            private global::System.Data.DataColumn columnFromCurrency;
            
            private global::System.Data.DataColumn columnToCurrency;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnCommissionAmount;
            
            private global::System.Data.DataColumn columnDebitReference;
            
            private global::System.Data.DataColumn columnCreditReference;
            
            private global::System.Data.DataColumn columnReferenceInfo1;
            
            private global::System.Data.DataColumn columnReferenceInfo2;
            
            private global::System.Data.DataColumn columnReferenceInfo3;
            
            private global::System.Data.DataColumn columnReferenceInfo4;
            
            private global::System.Data.DataColumn columnTransferTypeId;
            
            private global::System.Data.DataColumn columnCreditValueDate;
            
            private global::System.Data.DataColumn columnBankTransactionId;
            
            private global::System.Data.DataColumn columnTransactionStatus;
            
            private global::System.Data.DataColumn columnChannel;
            
            private global::System.Data.DataColumn columnErrorMessage;
            
            private global::System.Data.DataColumn columnRecordStatus;
            
            private global::System.Data.DataColumn columnUserId;
            
            private global::System.Data.DataColumn columnUserLevel;
            
            private global::System.Data.DataColumn columnCommissionFeesRecord;
            
            private global::System.Data.DataColumn columnNoOfAuthorizer;
            
            private global::System.Data.DataColumn columnCreatedDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public _Transaction_AccountToAccountDataTable() {
                this.TableName = "Transaction.AccountToAccount";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal _Transaction_AccountToAccountDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected _Transaction_AccountToAccountDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TransactionIdColumn {
                get {
                    return this.columnTransactionId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn FromAccountColumn {
                get {
                    return this.columnFromAccount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ToAccountColumn {
                get {
                    return this.columnToAccount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn FromCurrencyColumn {
                get {
                    return this.columnFromCurrency;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ToCurrencyColumn {
                get {
                    return this.columnToCurrency;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CommissionAmountColumn {
                get {
                    return this.columnCommissionAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn DebitReferenceColumn {
                get {
                    return this.columnDebitReference;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CreditReferenceColumn {
                get {
                    return this.columnCreditReference;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ReferenceInfo1Column {
                get {
                    return this.columnReferenceInfo1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ReferenceInfo2Column {
                get {
                    return this.columnReferenceInfo2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ReferenceInfo3Column {
                get {
                    return this.columnReferenceInfo3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ReferenceInfo4Column {
                get {
                    return this.columnReferenceInfo4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TransferTypeIdColumn {
                get {
                    return this.columnTransferTypeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CreditValueDateColumn {
                get {
                    return this.columnCreditValueDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn BankTransactionIdColumn {
                get {
                    return this.columnBankTransactionId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TransactionStatusColumn {
                get {
                    return this.columnTransactionStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ChannelColumn {
                get {
                    return this.columnChannel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ErrorMessageColumn {
                get {
                    return this.columnErrorMessage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn RecordStatusColumn {
                get {
                    return this.columnRecordStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn UserLevelColumn {
                get {
                    return this.columnUserLevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CommissionFeesRecordColumn {
                get {
                    return this.columnCommissionFeesRecord;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn NoOfAuthorizerColumn {
                get {
                    return this.columnNoOfAuthorizer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CreatedDateColumn {
                get {
                    return this.columnCreatedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public _Transaction_AccountToAccountRow this[int index] {
                get {
                    return ((_Transaction_AccountToAccountRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event _Transaction_AccountToAccountRowChangeEventHandler _Transaction_AccountToAccountRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event _Transaction_AccountToAccountRowChangeEventHandler _Transaction_AccountToAccountRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event _Transaction_AccountToAccountRowChangeEventHandler _Transaction_AccountToAccountRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event _Transaction_AccountToAccountRowChangeEventHandler _Transaction_AccountToAccountRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void Add_Transaction_AccountToAccountRow(_Transaction_AccountToAccountRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public _Transaction_AccountToAccountRow Add_Transaction_AccountToAccountRow(
                        System.Guid TransactionId, 
                        string FromAccount, 
                        string ToAccount, 
                        string FromCurrency, 
                        string ToCurrency, 
                        decimal Amount, 
                        decimal CommissionAmount, 
                        string DebitReference, 
                        string CreditReference, 
                        string ReferenceInfo1, 
                        string ReferenceInfo2, 
                        string ReferenceInfo3, 
                        string ReferenceInfo4, 
                        System.Guid TransferTypeId, 
                        System.DateTime CreditValueDate, 
                        string BankTransactionId, 
                        string TransactionStatus, 
                        string Channel, 
                        string ErrorMessage, 
                        string RecordStatus, 
                        System.Guid UserId, 
                        string UserLevel, 
                        string CommissionFeesRecord, 
                        int NoOfAuthorizer, 
                        System.DateTime CreatedDate) {
                _Transaction_AccountToAccountRow row_Transaction_AccountToAccountRow = ((_Transaction_AccountToAccountRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TransactionId,
                        FromAccount,
                        ToAccount,
                        FromCurrency,
                        ToCurrency,
                        Amount,
                        CommissionAmount,
                        DebitReference,
                        CreditReference,
                        ReferenceInfo1,
                        ReferenceInfo2,
                        ReferenceInfo3,
                        ReferenceInfo4,
                        TransferTypeId,
                        CreditValueDate,
                        BankTransactionId,
                        TransactionStatus,
                        Channel,
                        ErrorMessage,
                        RecordStatus,
                        UserId,
                        UserLevel,
                        CommissionFeesRecord,
                        NoOfAuthorizer,
                        CreatedDate};
                row_Transaction_AccountToAccountRow.ItemArray = columnValuesArray;
                this.Rows.Add(row_Transaction_AccountToAccountRow);
                return row_Transaction_AccountToAccountRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public _Transaction_AccountToAccountRow FindByTransactionId(System.Guid TransactionId) {
                return ((_Transaction_AccountToAccountRow)(this.Rows.Find(new object[] {
                            TransactionId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                _Transaction_AccountToAccountDataTable cln = ((_Transaction_AccountToAccountDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new _Transaction_AccountToAccountDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnTransactionId = base.Columns["TransactionId"];
                this.columnFromAccount = base.Columns["FromAccount"];
                this.columnToAccount = base.Columns["ToAccount"];
                this.columnFromCurrency = base.Columns["FromCurrency"];
                this.columnToCurrency = base.Columns["ToCurrency"];
                this.columnAmount = base.Columns["Amount"];
                this.columnCommissionAmount = base.Columns["CommissionAmount"];
                this.columnDebitReference = base.Columns["DebitReference"];
                this.columnCreditReference = base.Columns["CreditReference"];
                this.columnReferenceInfo1 = base.Columns["ReferenceInfo1"];
                this.columnReferenceInfo2 = base.Columns["ReferenceInfo2"];
                this.columnReferenceInfo3 = base.Columns["ReferenceInfo3"];
                this.columnReferenceInfo4 = base.Columns["ReferenceInfo4"];
                this.columnTransferTypeId = base.Columns["TransferTypeId"];
                this.columnCreditValueDate = base.Columns["CreditValueDate"];
                this.columnBankTransactionId = base.Columns["BankTransactionId"];
                this.columnTransactionStatus = base.Columns["TransactionStatus"];
                this.columnChannel = base.Columns["Channel"];
                this.columnErrorMessage = base.Columns["ErrorMessage"];
                this.columnRecordStatus = base.Columns["RecordStatus"];
                this.columnUserId = base.Columns["UserId"];
                this.columnUserLevel = base.Columns["UserLevel"];
                this.columnCommissionFeesRecord = base.Columns["CommissionFeesRecord"];
                this.columnNoOfAuthorizer = base.Columns["NoOfAuthorizer"];
                this.columnCreatedDate = base.Columns["CreatedDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnTransactionId = new global::System.Data.DataColumn("TransactionId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransactionId);
                this.columnFromAccount = new global::System.Data.DataColumn("FromAccount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromAccount);
                this.columnToAccount = new global::System.Data.DataColumn("ToAccount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToAccount);
                this.columnFromCurrency = new global::System.Data.DataColumn("FromCurrency", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromCurrency);
                this.columnToCurrency = new global::System.Data.DataColumn("ToCurrency", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToCurrency);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnCommissionAmount = new global::System.Data.DataColumn("CommissionAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommissionAmount);
                this.columnDebitReference = new global::System.Data.DataColumn("DebitReference", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDebitReference);
                this.columnCreditReference = new global::System.Data.DataColumn("CreditReference", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreditReference);
                this.columnReferenceInfo1 = new global::System.Data.DataColumn("ReferenceInfo1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReferenceInfo1);
                this.columnReferenceInfo2 = new global::System.Data.DataColumn("ReferenceInfo2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReferenceInfo2);
                this.columnReferenceInfo3 = new global::System.Data.DataColumn("ReferenceInfo3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReferenceInfo3);
                this.columnReferenceInfo4 = new global::System.Data.DataColumn("ReferenceInfo4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReferenceInfo4);
                this.columnTransferTypeId = new global::System.Data.DataColumn("TransferTypeId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransferTypeId);
                this.columnCreditValueDate = new global::System.Data.DataColumn("CreditValueDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreditValueDate);
                this.columnBankTransactionId = new global::System.Data.DataColumn("BankTransactionId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBankTransactionId);
                this.columnTransactionStatus = new global::System.Data.DataColumn("TransactionStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransactionStatus);
                this.columnChannel = new global::System.Data.DataColumn("Channel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChannel);
                this.columnErrorMessage = new global::System.Data.DataColumn("ErrorMessage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorMessage);
                this.columnRecordStatus = new global::System.Data.DataColumn("RecordStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecordStatus);
                this.columnUserId = new global::System.Data.DataColumn("UserId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnUserLevel = new global::System.Data.DataColumn("UserLevel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserLevel);
                this.columnCommissionFeesRecord = new global::System.Data.DataColumn("CommissionFeesRecord", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommissionFeesRecord);
                this.columnNoOfAuthorizer = new global::System.Data.DataColumn("NoOfAuthorizer", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNoOfAuthorizer);
                this.columnCreatedDate = new global::System.Data.DataColumn("CreatedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTransactionId}, true));
                this.columnTransactionId.AllowDBNull = false;
                this.columnTransactionId.Unique = true;
                this.columnFromAccount.AllowDBNull = false;
                this.columnFromAccount.MaxLength = 255;
                this.columnToAccount.AllowDBNull = false;
                this.columnToAccount.MaxLength = 255;
                this.columnFromCurrency.AllowDBNull = false;
                this.columnFromCurrency.MaxLength = 10;
                this.columnToCurrency.AllowDBNull = false;
                this.columnToCurrency.MaxLength = 10;
                this.columnAmount.AllowDBNull = false;
                this.columnCommissionAmount.AllowDBNull = false;
                this.columnDebitReference.AllowDBNull = false;
                this.columnDebitReference.MaxLength = 50;
                this.columnCreditReference.AllowDBNull = false;
                this.columnCreditReference.MaxLength = 50;
                this.columnReferenceInfo1.AllowDBNull = false;
                this.columnReferenceInfo1.MaxLength = 35;
                this.columnReferenceInfo2.AllowDBNull = false;
                this.columnReferenceInfo2.MaxLength = 35;
                this.columnReferenceInfo3.AllowDBNull = false;
                this.columnReferenceInfo3.MaxLength = 35;
                this.columnReferenceInfo4.AllowDBNull = false;
                this.columnReferenceInfo4.MaxLength = 35;
                this.columnTransferTypeId.AllowDBNull = false;
                this.columnBankTransactionId.AllowDBNull = false;
                this.columnBankTransactionId.MaxLength = 50;
                this.columnTransactionStatus.AllowDBNull = false;
                this.columnTransactionStatus.MaxLength = 50;
                this.columnChannel.AllowDBNull = false;
                this.columnChannel.MaxLength = 70;
                this.columnErrorMessage.AllowDBNull = false;
                this.columnErrorMessage.MaxLength = 2147483647;
                this.columnRecordStatus.AllowDBNull = false;
                this.columnRecordStatus.MaxLength = 5;
                this.columnUserId.AllowDBNull = false;
                this.columnUserLevel.AllowDBNull = false;
                this.columnUserLevel.MaxLength = 20;
                this.columnCommissionFeesRecord.AllowDBNull = false;
                this.columnCommissionFeesRecord.MaxLength = 2147483647;
                this.columnNoOfAuthorizer.AllowDBNull = false;
                this.columnCreatedDate.AllowDBNull = false;
                this.ExtendedProperties.Add("Generator_TableVarName", "_tableTransaction_AccountToAccount");
                this.ExtendedProperties.Add("Generator_UserTableName", "Transaction.AccountToAccount");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public _Transaction_AccountToAccountRow New_Transaction_AccountToAccountRow() {
                return ((_Transaction_AccountToAccountRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new _Transaction_AccountToAccountRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(_Transaction_AccountToAccountRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._Transaction_AccountToAccountRowChanged != null)) {
                    this._Transaction_AccountToAccountRowChanged(this, new _Transaction_AccountToAccountRowChangeEvent(((_Transaction_AccountToAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._Transaction_AccountToAccountRowChanging != null)) {
                    this._Transaction_AccountToAccountRowChanging(this, new _Transaction_AccountToAccountRowChangeEvent(((_Transaction_AccountToAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._Transaction_AccountToAccountRowDeleted != null)) {
                    this._Transaction_AccountToAccountRowDeleted(this, new _Transaction_AccountToAccountRowChangeEvent(((_Transaction_AccountToAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._Transaction_AccountToAccountRowDeleting != null)) {
                    this._Transaction_AccountToAccountRowDeleting(this, new _Transaction_AccountToAccountRowChangeEvent(((_Transaction_AccountToAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void Remove_Transaction_AccountToAccountRow(_Transaction_AccountToAccountRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                _Eoc_Account_TransferDataSet ds = new _Eoc_Account_TransferDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_Transaction_AccountToAccountDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class _Transaction_AccountToAccountRow : global::System.Data.DataRow {
            
            private _Transaction_AccountToAccountDataTable _tableTransaction_AccountToAccount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal _Transaction_AccountToAccountRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this._tableTransaction_AccountToAccount = ((_Transaction_AccountToAccountDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.Guid TransactionId {
                get {
                    return ((global::System.Guid)(this[this._tableTransaction_AccountToAccount.TransactionIdColumn]));
                }
                set {
                    this[this._tableTransaction_AccountToAccount.TransactionIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string FromAccount {
                get {
                    return ((string)(this[this._tableTransaction_AccountToAccount.FromAccountColumn]));
                }
                set {
                    this[this._tableTransaction_AccountToAccount.FromAccountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ToAccount {
                get {
                    return ((string)(this[this._tableTransaction_AccountToAccount.ToAccountColumn]));
                }
                set {
                    this[this._tableTransaction_AccountToAccount.ToAccountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string FromCurrency {
                get {
                    return ((string)(this[this._tableTransaction_AccountToAccount.FromCurrencyColumn]));
                }
                set {
                    this[this._tableTransaction_AccountToAccount.FromCurrencyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ToCurrency {
                get {
                    return ((string)(this[this._tableTransaction_AccountToAccount.ToCurrencyColumn]));
                }
                set {
                    this[this._tableTransaction_AccountToAccount.ToCurrencyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal Amount {
                get {
                    return ((decimal)(this[this._tableTransaction_AccountToAccount.AmountColumn]));
                }
                set {
                    this[this._tableTransaction_AccountToAccount.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal CommissionAmount {
                get {
                    return ((decimal)(this[this._tableTransaction_AccountToAccount.CommissionAmountColumn]));
                }
                set {
                    this[this._tableTransaction_AccountToAccount.CommissionAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string DebitReference {
                get {
                    return ((string)(this[this._tableTransaction_AccountToAccount.DebitReferenceColumn]));
                }
                set {
                    this[this._tableTransaction_AccountToAccount.DebitReferenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string CreditReference {
                get {
                    return ((string)(this[this._tableTransaction_AccountToAccount.CreditReferenceColumn]));
                }
                set {
                    this[this._tableTransaction_AccountToAccount.CreditReferenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ReferenceInfo1 {
                get {
                    return ((string)(this[this._tableTransaction_AccountToAccount.ReferenceInfo1Column]));
                }
                set {
                    this[this._tableTransaction_AccountToAccount.ReferenceInfo1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ReferenceInfo2 {
                get {
                    return ((string)(this[this._tableTransaction_AccountToAccount.ReferenceInfo2Column]));
                }
                set {
                    this[this._tableTransaction_AccountToAccount.ReferenceInfo2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ReferenceInfo3 {
                get {
                    return ((string)(this[this._tableTransaction_AccountToAccount.ReferenceInfo3Column]));
                }
                set {
                    this[this._tableTransaction_AccountToAccount.ReferenceInfo3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ReferenceInfo4 {
                get {
                    return ((string)(this[this._tableTransaction_AccountToAccount.ReferenceInfo4Column]));
                }
                set {
                    this[this._tableTransaction_AccountToAccount.ReferenceInfo4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.Guid TransferTypeId {
                get {
                    return ((global::System.Guid)(this[this._tableTransaction_AccountToAccount.TransferTypeIdColumn]));
                }
                set {
                    this[this._tableTransaction_AccountToAccount.TransferTypeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.DateTime CreditValueDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this._tableTransaction_AccountToAccount.CreditValueDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreditValueDate\' in table \'Transaction.AccountToAccount\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this._tableTransaction_AccountToAccount.CreditValueDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string BankTransactionId {
                get {
                    return ((string)(this[this._tableTransaction_AccountToAccount.BankTransactionIdColumn]));
                }
                set {
                    this[this._tableTransaction_AccountToAccount.BankTransactionIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string TransactionStatus {
                get {
                    return ((string)(this[this._tableTransaction_AccountToAccount.TransactionStatusColumn]));
                }
                set {
                    this[this._tableTransaction_AccountToAccount.TransactionStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Channel {
                get {
                    return ((string)(this[this._tableTransaction_AccountToAccount.ChannelColumn]));
                }
                set {
                    this[this._tableTransaction_AccountToAccount.ChannelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ErrorMessage {
                get {
                    return ((string)(this[this._tableTransaction_AccountToAccount.ErrorMessageColumn]));
                }
                set {
                    this[this._tableTransaction_AccountToAccount.ErrorMessageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string RecordStatus {
                get {
                    return ((string)(this[this._tableTransaction_AccountToAccount.RecordStatusColumn]));
                }
                set {
                    this[this._tableTransaction_AccountToAccount.RecordStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.Guid UserId {
                get {
                    return ((global::System.Guid)(this[this._tableTransaction_AccountToAccount.UserIdColumn]));
                }
                set {
                    this[this._tableTransaction_AccountToAccount.UserIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string UserLevel {
                get {
                    return ((string)(this[this._tableTransaction_AccountToAccount.UserLevelColumn]));
                }
                set {
                    this[this._tableTransaction_AccountToAccount.UserLevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string CommissionFeesRecord {
                get {
                    return ((string)(this[this._tableTransaction_AccountToAccount.CommissionFeesRecordColumn]));
                }
                set {
                    this[this._tableTransaction_AccountToAccount.CommissionFeesRecordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int NoOfAuthorizer {
                get {
                    return ((int)(this[this._tableTransaction_AccountToAccount.NoOfAuthorizerColumn]));
                }
                set {
                    this[this._tableTransaction_AccountToAccount.NoOfAuthorizerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.DateTime CreatedDate {
                get {
                    return ((global::System.DateTime)(this[this._tableTransaction_AccountToAccount.CreatedDateColumn]));
                }
                set {
                    this[this._tableTransaction_AccountToAccount.CreatedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCreditValueDateNull() {
                return this.IsNull(this._tableTransaction_AccountToAccount.CreditValueDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCreditValueDateNull() {
                this[this._tableTransaction_AccountToAccount.CreditValueDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class _Transaction_AccountToAccountRowChangeEvent : global::System.EventArgs {
            
            private _Transaction_AccountToAccountRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public _Transaction_AccountToAccountRowChangeEvent(_Transaction_AccountToAccountRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public _Transaction_AccountToAccountRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace RdlcDemo._Eoc_Account_TransferDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Transaction_AccountToAccountTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public Transaction_AccountToAccountTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Transaction.AccountToAccount";
            tableMapping.ColumnMappings.Add("TransactionId", "TransactionId");
            tableMapping.ColumnMappings.Add("FromAccount", "FromAccount");
            tableMapping.ColumnMappings.Add("ToAccount", "ToAccount");
            tableMapping.ColumnMappings.Add("FromCurrency", "FromCurrency");
            tableMapping.ColumnMappings.Add("ToCurrency", "ToCurrency");
            tableMapping.ColumnMappings.Add("Amount", "Amount");
            tableMapping.ColumnMappings.Add("CommissionAmount", "CommissionAmount");
            tableMapping.ColumnMappings.Add("DebitReference", "DebitReference");
            tableMapping.ColumnMappings.Add("CreditReference", "CreditReference");
            tableMapping.ColumnMappings.Add("ReferenceInfo1", "ReferenceInfo1");
            tableMapping.ColumnMappings.Add("ReferenceInfo2", "ReferenceInfo2");
            tableMapping.ColumnMappings.Add("ReferenceInfo3", "ReferenceInfo3");
            tableMapping.ColumnMappings.Add("ReferenceInfo4", "ReferenceInfo4");
            tableMapping.ColumnMappings.Add("TransferTypeId", "TransferTypeId");
            tableMapping.ColumnMappings.Add("CreditValueDate", "CreditValueDate");
            tableMapping.ColumnMappings.Add("BankTransactionId", "BankTransactionId");
            tableMapping.ColumnMappings.Add("TransactionStatus", "TransactionStatus");
            tableMapping.ColumnMappings.Add("Channel", "Channel");
            tableMapping.ColumnMappings.Add("ErrorMessage", "ErrorMessage");
            tableMapping.ColumnMappings.Add("RecordStatus", "RecordStatus");
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("UserLevel", "UserLevel");
            tableMapping.ColumnMappings.Add("CommissionFeesRecord", "CommissionFeesRecord");
            tableMapping.ColumnMappings.Add("NoOfAuthorizer", "NoOfAuthorizer");
            tableMapping.ColumnMappings.Add("CreatedDate", "CreatedDate");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Transaction.AccountToAccount] WHERE (([TransactionId] = @Origi" +
                "nal_TransactionId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TransactionId", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TransactionId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Transaction.AccountToAccount] ([TransactionId], [FromAccount], [ToAccount], [FromCurrency], [ToCurrency], [Amount], [CommissionAmount], [DebitReference], [CreditReference], [ReferenceInfo1], [ReferenceInfo2], [ReferenceInfo3], [ReferenceInfo4], [TransferTypeId], [CreditValueDate], [BankTransactionId], [TransactionStatus], [Channel], [ErrorMessage], [RecordStatus], [UserId], [UserLevel], [CommissionFeesRecord], [NoOfAuthorizer], [CreatedDate]) VALUES (@TransactionId, @FromAccount, @ToAccount, @FromCurrency, @ToCurrency, @Amount, @CommissionAmount, @DebitReference, @CreditReference, @ReferenceInfo1, @ReferenceInfo2, @ReferenceInfo3, @ReferenceInfo4, @TransferTypeId, @CreditValueDate, @BankTransactionId, @TransactionStatus, @Channel, @ErrorMessage, @RecordStatus, @UserId, @UserLevel, @CommissionFeesRecord, @NoOfAuthorizer, @CreatedDate)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TransactionId", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TransactionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FromAccount", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FromAccount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToAccount", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToAccount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FromCurrency", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FromCurrency", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToCurrency", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToCurrency", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Amount", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Amount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CommissionAmount", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CommissionAmount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DebitReference", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DebitReference", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreditReference", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreditReference", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReferenceInfo1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReferenceInfo1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReferenceInfo2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReferenceInfo2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReferenceInfo3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReferenceInfo3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReferenceInfo4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReferenceInfo4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TransferTypeId", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TransferTypeId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreditValueDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreditValueDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BankTransactionId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BankTransactionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TransactionStatus", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TransactionStatus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Channel", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Channel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ErrorMessage", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ErrorMessage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RecordStatus", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RecordStatus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserId", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserLevel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserLevel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CommissionFeesRecord", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CommissionFeesRecord", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NoOfAuthorizer", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NoOfAuthorizer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreatedDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreatedDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Transaction.AccountToAccount] SET [TransactionId] = @TransactionId, [FromAccount] = @FromAccount, [ToAccount] = @ToAccount, [FromCurrency] = @FromCurrency, [ToCurrency] = @ToCurrency, [Amount] = @Amount, [CommissionAmount] = @CommissionAmount, [DebitReference] = @DebitReference, [CreditReference] = @CreditReference, [ReferenceInfo1] = @ReferenceInfo1, [ReferenceInfo2] = @ReferenceInfo2, [ReferenceInfo3] = @ReferenceInfo3, [ReferenceInfo4] = @ReferenceInfo4, [TransferTypeId] = @TransferTypeId, [CreditValueDate] = @CreditValueDate, [BankTransactionId] = @BankTransactionId, [TransactionStatus] = @TransactionStatus, [Channel] = @Channel, [ErrorMessage] = @ErrorMessage, [RecordStatus] = @RecordStatus, [UserId] = @UserId, [UserLevel] = @UserLevel, [CommissionFeesRecord] = @CommissionFeesRecord, [NoOfAuthorizer] = @NoOfAuthorizer, [CreatedDate] = @CreatedDate WHERE (([TransactionId] = @Original_TransactionId))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TransactionId", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TransactionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FromAccount", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FromAccount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToAccount", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToAccount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FromCurrency", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FromCurrency", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToCurrency", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToCurrency", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Amount", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Amount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CommissionAmount", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CommissionAmount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DebitReference", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DebitReference", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreditReference", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreditReference", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReferenceInfo1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReferenceInfo1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReferenceInfo2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReferenceInfo2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReferenceInfo3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReferenceInfo3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReferenceInfo4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReferenceInfo4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TransferTypeId", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TransferTypeId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreditValueDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreditValueDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BankTransactionId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BankTransactionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TransactionStatus", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TransactionStatus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Channel", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Channel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ErrorMessage", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ErrorMessage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RecordStatus", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RecordStatus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserId", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserLevel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserLevel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CommissionFeesRecord", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CommissionFeesRecord", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NoOfAuthorizer", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NoOfAuthorizer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreatedDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreatedDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TransactionId", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TransactionId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["Eoc_Account_TransferConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT TransactionId, FromAccount, ToAccount, FromCurrency, ToCurrency, Amount, CommissionAmount, DebitReference, CreditReference, ReferenceInfo1, ReferenceInfo2, ReferenceInfo3, ReferenceInfo4, TransferTypeId, CreditValueDate, BankTransactionId, TransactionStatus, Channel, ErrorMessage, RecordStatus, UserId, UserLevel, CommissionFeesRecord, NoOfAuthorizer, CreatedDate FROM dbo.[Transaction.AccountToAccount]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(_Eoc_Account_TransferDataSet._Transaction_AccountToAccountDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual _Eoc_Account_TransferDataSet._Transaction_AccountToAccountDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            _Eoc_Account_TransferDataSet._Transaction_AccountToAccountDataTable dataTable = new _Eoc_Account_TransferDataSet._Transaction_AccountToAccountDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(_Eoc_Account_TransferDataSet._Transaction_AccountToAccountDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(_Eoc_Account_TransferDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Transaction.AccountToAccount");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_TransactionId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_TransactionId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    System.Guid TransactionId, 
                    string FromAccount, 
                    string ToAccount, 
                    string FromCurrency, 
                    string ToCurrency, 
                    decimal Amount, 
                    decimal CommissionAmount, 
                    string DebitReference, 
                    string CreditReference, 
                    string ReferenceInfo1, 
                    string ReferenceInfo2, 
                    string ReferenceInfo3, 
                    string ReferenceInfo4, 
                    System.Guid TransferTypeId, 
                    global::System.Nullable<global::System.DateTime> CreditValueDate, 
                    string BankTransactionId, 
                    string TransactionStatus, 
                    string Channel, 
                    string ErrorMessage, 
                    string RecordStatus, 
                    System.Guid UserId, 
                    string UserLevel, 
                    string CommissionFeesRecord, 
                    int NoOfAuthorizer, 
                    System.DateTime CreatedDate) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(TransactionId));
            if ((FromAccount == null)) {
                throw new global::System.ArgumentNullException("FromAccount");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(FromAccount));
            }
            if ((ToAccount == null)) {
                throw new global::System.ArgumentNullException("ToAccount");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ToAccount));
            }
            if ((FromCurrency == null)) {
                throw new global::System.ArgumentNullException("FromCurrency");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(FromCurrency));
            }
            if ((ToCurrency == null)) {
                throw new global::System.ArgumentNullException("ToCurrency");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(ToCurrency));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(Amount));
            this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(CommissionAmount));
            if ((DebitReference == null)) {
                throw new global::System.ArgumentNullException("DebitReference");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(DebitReference));
            }
            if ((CreditReference == null)) {
                throw new global::System.ArgumentNullException("CreditReference");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(CreditReference));
            }
            if ((ReferenceInfo1 == null)) {
                throw new global::System.ArgumentNullException("ReferenceInfo1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(ReferenceInfo1));
            }
            if ((ReferenceInfo2 == null)) {
                throw new global::System.ArgumentNullException("ReferenceInfo2");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(ReferenceInfo2));
            }
            if ((ReferenceInfo3 == null)) {
                throw new global::System.ArgumentNullException("ReferenceInfo3");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(ReferenceInfo3));
            }
            if ((ReferenceInfo4 == null)) {
                throw new global::System.ArgumentNullException("ReferenceInfo4");
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(ReferenceInfo4));
            }
            this.Adapter.InsertCommand.Parameters[13].Value = ((System.Guid)(TransferTypeId));
            if ((CreditValueDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((System.DateTime)(CreditValueDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((BankTransactionId == null)) {
                throw new global::System.ArgumentNullException("BankTransactionId");
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(BankTransactionId));
            }
            if ((TransactionStatus == null)) {
                throw new global::System.ArgumentNullException("TransactionStatus");
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(TransactionStatus));
            }
            if ((Channel == null)) {
                throw new global::System.ArgumentNullException("Channel");
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(Channel));
            }
            if ((ErrorMessage == null)) {
                throw new global::System.ArgumentNullException("ErrorMessage");
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(ErrorMessage));
            }
            if ((RecordStatus == null)) {
                throw new global::System.ArgumentNullException("RecordStatus");
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(RecordStatus));
            }
            this.Adapter.InsertCommand.Parameters[20].Value = ((System.Guid)(UserId));
            if ((UserLevel == null)) {
                throw new global::System.ArgumentNullException("UserLevel");
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(UserLevel));
            }
            if ((CommissionFeesRecord == null)) {
                throw new global::System.ArgumentNullException("CommissionFeesRecord");
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(CommissionFeesRecord));
            }
            this.Adapter.InsertCommand.Parameters[23].Value = ((int)(NoOfAuthorizer));
            this.Adapter.InsertCommand.Parameters[24].Value = ((System.DateTime)(CreatedDate));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.Guid TransactionId, 
                    string FromAccount, 
                    string ToAccount, 
                    string FromCurrency, 
                    string ToCurrency, 
                    decimal Amount, 
                    decimal CommissionAmount, 
                    string DebitReference, 
                    string CreditReference, 
                    string ReferenceInfo1, 
                    string ReferenceInfo2, 
                    string ReferenceInfo3, 
                    string ReferenceInfo4, 
                    System.Guid TransferTypeId, 
                    global::System.Nullable<global::System.DateTime> CreditValueDate, 
                    string BankTransactionId, 
                    string TransactionStatus, 
                    string Channel, 
                    string ErrorMessage, 
                    string RecordStatus, 
                    System.Guid UserId, 
                    string UserLevel, 
                    string CommissionFeesRecord, 
                    int NoOfAuthorizer, 
                    System.DateTime CreatedDate, 
                    System.Guid Original_TransactionId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(TransactionId));
            if ((FromAccount == null)) {
                throw new global::System.ArgumentNullException("FromAccount");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(FromAccount));
            }
            if ((ToAccount == null)) {
                throw new global::System.ArgumentNullException("ToAccount");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ToAccount));
            }
            if ((FromCurrency == null)) {
                throw new global::System.ArgumentNullException("FromCurrency");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(FromCurrency));
            }
            if ((ToCurrency == null)) {
                throw new global::System.ArgumentNullException("ToCurrency");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(ToCurrency));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(Amount));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(CommissionAmount));
            if ((DebitReference == null)) {
                throw new global::System.ArgumentNullException("DebitReference");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(DebitReference));
            }
            if ((CreditReference == null)) {
                throw new global::System.ArgumentNullException("CreditReference");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(CreditReference));
            }
            if ((ReferenceInfo1 == null)) {
                throw new global::System.ArgumentNullException("ReferenceInfo1");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(ReferenceInfo1));
            }
            if ((ReferenceInfo2 == null)) {
                throw new global::System.ArgumentNullException("ReferenceInfo2");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(ReferenceInfo2));
            }
            if ((ReferenceInfo3 == null)) {
                throw new global::System.ArgumentNullException("ReferenceInfo3");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(ReferenceInfo3));
            }
            if ((ReferenceInfo4 == null)) {
                throw new global::System.ArgumentNullException("ReferenceInfo4");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(ReferenceInfo4));
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((System.Guid)(TransferTypeId));
            if ((CreditValueDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((System.DateTime)(CreditValueDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((BankTransactionId == null)) {
                throw new global::System.ArgumentNullException("BankTransactionId");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(BankTransactionId));
            }
            if ((TransactionStatus == null)) {
                throw new global::System.ArgumentNullException("TransactionStatus");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(TransactionStatus));
            }
            if ((Channel == null)) {
                throw new global::System.ArgumentNullException("Channel");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Channel));
            }
            if ((ErrorMessage == null)) {
                throw new global::System.ArgumentNullException("ErrorMessage");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(ErrorMessage));
            }
            if ((RecordStatus == null)) {
                throw new global::System.ArgumentNullException("RecordStatus");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(RecordStatus));
            }
            this.Adapter.UpdateCommand.Parameters[20].Value = ((System.Guid)(UserId));
            if ((UserLevel == null)) {
                throw new global::System.ArgumentNullException("UserLevel");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(UserLevel));
            }
            if ((CommissionFeesRecord == null)) {
                throw new global::System.ArgumentNullException("CommissionFeesRecord");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(CommissionFeesRecord));
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(NoOfAuthorizer));
            this.Adapter.UpdateCommand.Parameters[24].Value = ((System.DateTime)(CreatedDate));
            this.Adapter.UpdateCommand.Parameters[25].Value = ((System.Guid)(Original_TransactionId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string FromAccount, 
                    string ToAccount, 
                    string FromCurrency, 
                    string ToCurrency, 
                    decimal Amount, 
                    decimal CommissionAmount, 
                    string DebitReference, 
                    string CreditReference, 
                    string ReferenceInfo1, 
                    string ReferenceInfo2, 
                    string ReferenceInfo3, 
                    string ReferenceInfo4, 
                    System.Guid TransferTypeId, 
                    global::System.Nullable<global::System.DateTime> CreditValueDate, 
                    string BankTransactionId, 
                    string TransactionStatus, 
                    string Channel, 
                    string ErrorMessage, 
                    string RecordStatus, 
                    System.Guid UserId, 
                    string UserLevel, 
                    string CommissionFeesRecord, 
                    int NoOfAuthorizer, 
                    System.DateTime CreatedDate, 
                    System.Guid Original_TransactionId) {
            return this.Update(Original_TransactionId, FromAccount, ToAccount, FromCurrency, ToCurrency, Amount, CommissionAmount, DebitReference, CreditReference, ReferenceInfo1, ReferenceInfo2, ReferenceInfo3, ReferenceInfo4, TransferTypeId, CreditValueDate, BankTransactionId, TransactionStatus, Channel, ErrorMessage, RecordStatus, UserId, UserLevel, CommissionFeesRecord, NoOfAuthorizer, CreatedDate, Original_TransactionId);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private Transaction_AccountToAccountTableAdapter _transaction_AccountToAccountTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public Transaction_AccountToAccountTableAdapter Transaction_AccountToAccountTableAdapter {
            get {
                return this._transaction_AccountToAccountTableAdapter;
            }
            set {
                this._transaction_AccountToAccountTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._transaction_AccountToAccountTableAdapter != null) 
                            && (this._transaction_AccountToAccountTableAdapter.Connection != null))) {
                    return this._transaction_AccountToAccountTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._transaction_AccountToAccountTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateUpdatedRows(_Eoc_Account_TransferDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._transaction_AccountToAccountTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet._Transaction_AccountToAccount.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._transaction_AccountToAccountTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateInsertedRows(_Eoc_Account_TransferDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._transaction_AccountToAccountTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet._Transaction_AccountToAccount.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._transaction_AccountToAccountTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateDeletedRows(_Eoc_Account_TransferDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._transaction_AccountToAccountTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet._Transaction_AccountToAccount.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._transaction_AccountToAccountTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public virtual int UpdateAll(_Eoc_Account_TransferDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._transaction_AccountToAccountTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._transaction_AccountToAccountTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._transaction_AccountToAccountTableAdapter != null)) {
                    revertConnections.Add(this._transaction_AccountToAccountTableAdapter, this._transaction_AccountToAccountTableAdapter.Connection);
                    this._transaction_AccountToAccountTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._transaction_AccountToAccountTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._transaction_AccountToAccountTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._transaction_AccountToAccountTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._transaction_AccountToAccountTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._transaction_AccountToAccountTableAdapter != null)) {
                    this._transaction_AccountToAccountTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._transaction_AccountToAccountTableAdapter]));
                    this._transaction_AccountToAccountTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591